//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.05.05 at 02:49:41 PM AST 
//


package uk.org.naptan;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for FeatureTypeEnumeration.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="FeatureTypeEnumeration">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *     &lt;enumeration value="legOrigin"/>
 *     &lt;enumeration value="legDestination"/>
 *     &lt;enumeration value="bend"/>
 *     &lt;enumeration value="crossing"/>
 *     &lt;enumeration value="bridge"/>
 *     &lt;enumeration value="junction"/>
 *     &lt;enumeration value="miniRoundabout"/>
 *     &lt;enumeration value="roadChange"/>
 *     &lt;enumeration value="roundabout"/>
 *     &lt;enumeration value="subway"/>
 *     &lt;enumeration value="trafficLights"/>
 *     &lt;enumeration value="landmark"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "FeatureTypeEnumeration")
@XmlEnum
public enum FeatureTypeEnumeration {


    /**
     * The start point of the leg.
     * 
     */
    @XmlEnumValue("legOrigin")
    LEG_ORIGIN("legOrigin"),

    /**
     * The end point of the leg.
     * 
     */
    @XmlEnumValue("legDestination")
    LEG_DESTINATION("legDestination"),

    /**
     * A bend in the track that merits attention (without a junction).
     * 
     */
    @XmlEnumValue("bend")
    BEND("bend"),

    /**
     * Cross over the road.
     * 
     */
    @XmlEnumValue("crossing")
    CROSSING("crossing"),

    /**
     * Traversing over a bridge.
     * 
     */
    @XmlEnumValue("bridge")
    BRIDGE("bridge"),

    /**
     * Either a point at which another road is taken, or a side road that is passed along the way.
     * 
     */
    @XmlEnumValue("junction")
    JUNCTION("junction"),
    @XmlEnumValue("miniRoundabout")
    MINI_ROUNDABOUT("miniRoundabout"),

    /**
     * Denotes a change of road name when there is no junction.
     * 
     */
    @XmlEnumValue("roadChange")
    ROAD_CHANGE("roadChange"),
    @XmlEnumValue("roundabout")
    ROUNDABOUT("roundabout"),

    /**
     * Going through a subway.
     * 
     */
    @XmlEnumValue("subway")
    SUBWAY("subway"),
    @XmlEnumValue("trafficLights")
    TRAFFIC_LIGHTS("trafficLights"),

    /**
     * A named landmark that can be seen from the track. The name should be provided in the Feature Description.
     * 
     */
    @XmlEnumValue("landmark")
    LANDMARK("landmark");
    private final String value;

    FeatureTypeEnumeration(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static FeatureTypeEnumeration fromValue(String v) {
        for (FeatureTypeEnumeration c: FeatureTypeEnumeration.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
